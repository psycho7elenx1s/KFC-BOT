import os
import json
import asyncio
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
import requests
from aiohttp import web
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=os.getenv('TELEGRAM_BOT_TOKEN'))
dp = Dispatcher()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ CryptoBot
CRYPTO_BOT_TOKEN = os.getenv('CRYPTO_BOT_TOKEN')
CRYPTO_BOT_API_URL = "https://pay.crypt.bot/api"

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_FILE = 'database.json'

# –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def load_db():
    try:
        with open(DB_FILE, 'r') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return {
            'users': {},
            'orders': {},
            'admins': [int(admin_id) for admin_id in os.getenv('ADMIN_IDS', '').split(',') if admin_id],
            'settings': {}
        }

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def save_db(db):
    with open(DB_FILE, 'w') as f:
        json.dump(db, f, indent=4)

# –ö–ª–∞—Å—Å—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
class OrderStates(StatesGroup):
    choosing_platform = State()
    choosing_service = State()
    choosing_date = State()
    choosing_time = State()
    entering_channel = State()
    confirmation = State()

class PaymentStates(StatesGroup):
    choosing_amount = State()
    confirmation = State()

class AdminStates(StatesGroup):
    managing_orders = State()
    adding_admin = State()
    removing_admin = State()
    changing_balance = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_kb(user_id):
    db = load_db()
    kb = ReplyKeyboardBuilder()
    kb.add(KeyboardButton(text="üõçÔ∏è –ó–∞–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥—É"))
    kb.add(KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"))
    kb.add(KeyboardButton(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞"))
    
    if user_id in db['admins']:
        kb.add(KeyboardButton(text="üëë –ê–¥–º–∏–Ω"))
    
    kb.adjust(2)
    return kb.as_markup(resize_keyboard=True)

def get_back_kb():
    kb = ReplyKeyboardBuilder()
    kb.add(KeyboardButton(text="üîô –ù–∞–∑–∞–¥"))
    return kb.as_markup(resize_keyboard=True)

# –•–µ–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    db = load_db()
    user_id = message.from_user.id
    
    if str(user_id) not in db['users']:
        db['users'][str(user_id)] = {
            'balance': 0,
            'orders': [],
            'registration_date': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            'username': message.from_user.username
        }
        save_db(db)
    
    await message.answer_photo(
        photo="https://example.com/welcome_image.jpg",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π URL
        caption="üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è —Å—Ç—Ä–∏–º–æ–≤!",
        reply_markup=get_main_kb(user_id)
    )

@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def cmd_back(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_kb(message.from_user.id)
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def on_startup():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞

async def on_shutdown():
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def main():
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    
    # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ (–µ—Å–ª–∏ –±—ã–ª)
    await bot.delete_webhook(drop_pending_updates=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥
    await dp.start_polling(bot)

if __name__ == "__main__":
    # –î–ª—è Render: —Å–æ–∑–¥–∞–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –±–æ—Ç–∞ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    app = web.Application()
    runner = web.AppRunner(app)
    
    async def keep_alive():
        while True:
            await asyncio.sleep(15 * 60)  # –ö–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
            try:
                # –ü—Ä–æ—Å—Ç–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                db = load_db()
                if db['admins']:
                    await bot.send_message(db['admins'][0], "ü§ñ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω!")
            except Exception as e:
                logger.error(f"Keep alive error: {e}")
    
    async def start():
        await runner.setup()
        site = web.TCPSite(runner, '0.0.0.0', 8080)
        await site.start()
        asyncio.create_task(keep_alive())
        await main()
    
    asyncio.run(start())
    # –ß–∞—Å—Ç—å 2: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –∑–∞–∫–∞–∑–∞ —É—Å–ª—É–≥

# –¶–µ–Ω—ã –Ω–∞ —É—Å–ª—É–≥–∏
SERVICE_PRICES = {
    "–ü–æ–¥–ø–∏—Å—á–∏–∫–∏": {"price": 20, "min": 10, "unit": "—à—Ç"},
    "–ñ–∏–≤–æ–π —á–∞—Ç RU": {"price": 319, "min": 1, "unit": "—á–∞—Å"},
    "–ñ–∏–≤–æ–π —á–∞—Ç ENG": {"price": 419, "min": 1, "unit": "—á–∞—Å"},
    "–ó—Ä–∏—Ç–µ–ª–∏": {"price": 1, "min": 10, "unit": "—à—Ç"}
}

# –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ —É—Å–ª—É–≥
@dp.message(F.text == "üõçÔ∏è –ó–∞–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥—É")
async def cmd_order(message: types.Message, state: FSMContext):
    kb = ReplyKeyboardBuilder()
    kb.add(KeyboardButton(text="üéÆ Kick"))
    kb.add(KeyboardButton(text="üì∫ YouTube"))
    kb.add(KeyboardButton(text="üü£ Twitch"))
    kb.add(KeyboardButton(text="üîô –ù–∞–∑–∞–¥"))
    kb.adjust(2)
    
    await message.answer_photo(
        photo="https://example.com/order_image.jpg",
        caption="–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É:",
        reply_markup=kb.as_markup(resize_keyboard=True)
    )
    await state.set_state(OrderStates.choosing_platform)

@dp.message(OrderStates.choosing_platform, F.text.in_(["üéÆ Kick", "üì∫ YouTube", "üü£ Twitch"]))
async def process_platform(message: types.Message, state: FSMContext):
    platform_map = {
        "üéÆ Kick": "Kick",
        "üì∫ YouTube": "YouTube",
        "üü£ Twitch": "Twitch"
    }
    await state.update_data(platform=platform_map[message.text])
    
    kb = ReplyKeyboardBuilder()
    for service in SERVICE_PRICES:
        kb.add(KeyboardButton(text=service))
    kb.add(KeyboardButton(text="üîô –ù–∞–∑–∞–¥"))
    kb.adjust(2)
    
    await message.answer(
        f"–í—ã–±—Ä–∞–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform_map[message.text]}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
        reply_markup=kb.as_markup(resize_keyboard=True)
    )
    await state.set_state(OrderStates.choosing_service)

@dp.message(OrderStates.choosing_service, F.text.in_(list(SERVICE_PRICES.keys())))
async def process_service(message: types.Message, state: FSMContext):
    service = message.text
    price_info = SERVICE_PRICES[service]
    
    await state.update_data(service=service, price_info=price_info)
    
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è, –Ω–æ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥
    await message.answer(
        f"–£—Å–ª—É–≥–∞: {service}\n–¶–µ–Ω–∞: {price_info['price']} —Ä—É–±/{price_info['unit']}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å—Ç—Ä–∏–º–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.06):",
        reply_markup=get_back_kb())
    )
    await state.set_state(OrderStates.choosing_date)

@dp.message(OrderStates.choosing_date, F.text.regexp(r'^\d{2}\.\d{2}$'))
async def process_date(message: types.Message, state: FSMContext):
    await state.update_data(date=message.text)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–∏–º–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:00):",
        reply_markup=get_back_kb())
    )
    await state.set_state(OrderStates.choosing_time)

@dp.message(OrderStates.choosing_time, F.text.regexp(r'^\d{2}:\d{2}$'))
async def process_time(message: types.Message, state: FSMContext):
    await state.update_data(time=message.text)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'MyCoolChannel'):",
        reply_markup=get_back_kb())
    )
    await state.set_state(OrderStates.entering_channel)

@dp.message(OrderStates.entering_channel)
async def process_channel(message: types.Message, state: FSMContext):
    await state.update_data(channel=message.text)
    data = await state.get_data()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    confirmation_msg = (
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:\n\n"
        f"1. –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {data['platform']}\n"
        f"2. –£—Å–ª—É–≥–∞: {data['service']} - {data['price_info']['price']} —Ä—É–±/{data['price_info']['unit']}\n"
        f"3. –ö–∞–Ω–∞–ª: {data['channel']}\n"
        f"4. –î–∞—Ç–∞ —Å—Ç—Ä–∏–º–∞: {data['date']}\n"
        f"5. –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {data['time']}\n\n"
        "–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {data['price_info']['price']} —Ä—É–±"
    )
    
    kb = ReplyKeyboardBuilder()
    kb.add(KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"))
    kb.add(KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"))
    kb.add(KeyboardButton(text="üîô –ù–∞–∑–∞–¥"))
    kb.adjust(2)
    
    await message.answer(
        confirmation_msg,
        reply_markup=kb.as_markup(resize_keyboard=True))
    )
    await state.set_state(OrderStates.confirmation)

@dp.message(OrderStates.confirmation, F.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"))
async def confirm_order(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    db = load_db()
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
    order_id = len(db['orders']) + 1
    db['orders'][str(order_id)] = {
        'user_id': user_id,
        'platform': data['platform'],
        'service': data['service'],
        'channel': data['channel'],
        'date': data['date'],
        'time': data['time'],
        'amount': data['price_info']['price'],
        'status': 'pending_payment',
        'created_at': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db['users'][str(user_id)]['orders'].append(order_id)
    save_db(db)
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–ø–ª–∞—Ç–∏—Ç—å
    kb = ReplyKeyboardBuilder()
    kb.add(KeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π"))
    kb.add(KeyboardButton(text="üí∞ –û–ø–ª–∞—Ç–∏—Ç—å CryptoBot"))
    kb.add(KeyboardButton(text="üîô –ù–∞–∑–∞–¥"))
    kb.adjust(2)
    
    await message.answer(
        "–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω! –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=kb.as_markup(resize_keyboard=True))
    )
    await state.clear()

# –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ CryptoBot
@dp.message(F.text == "üí∞ –û–ø–ª–∞—Ç–∏—Ç—å CryptoBot"))
async def pay_with_cryptobot(message: types.Message):
    db = load_db()
    user_id = message.from_user.id
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_orders = [order for order_id, order in db['orders'].items() 
                  if order['user_id'] == user_id and order['status'] == 'pending_payment']
    
    if not user_orders:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã.")
        return
    
    last_order = user_orders[-1]
    amount = last_order['amount']
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –≤ CryptoBot
    headers = {
        "Crypto-Pay-API-Token": CRYPTO_BOT_TOKEN,
        "Content-Type": "application/json"
    }
    payload = {
        "amount": amount,
        "asset": "USDT",  # –ò–ª–∏ –¥—Ä—É–≥–∞—è –≤–∞–ª—é—Ç–∞
        "description": f"–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ #{list(db['orders'].keys())[-1]}",
        "hidden_message": f"–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ {list(db['orders'].keys())[-1]}",
        "paid_btn_name": "viewItem",
        "paid_btn_url": "https://t.me/your_bot",
        "payload": str(user_id)
    }
    
    try:
        response = requests.post(f"{CRYPTO_BOT_API_URL}/createInvoice", headers=headers, json=payload)
        response.raise_for_status()
        invoice = response.json()['result']
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º invoice_id –≤ –∑–∞–∫–∞–∑–µ
        db['orders'][str(list(db['orders'].keys())[-1])]['invoice_id'] = invoice['invoice_id']
        save_db(db)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
        await message.answer(
            f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {amount} —Ä—É–± (~{amount / 75:.2f} USDT)\n\n"
            f"–û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {invoice['pay_url']}\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –≤–∞—à –∑–∞–∫–∞–∑.",
            reply_markup=get_back_kb())
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –æ–ø–ª–∞—Ç—ã
        asyncio.create_task(check_payment(invoice['invoice_id'], user_id, list(db['orders'].keys())[-1]))
        
    except Exception as e:
        logger.error(f"CryptoBot error: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.",
            reply_markup=get_back_kb())
        )

async def check_payment(invoice_id, user_id, order_id):
    db = load_db()
    headers = {
        "Crypto-Pay-API-Token": CRYPTO_BOT_TOKEN
    }
    
    for _ in range(30):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç (30 —Ä–∞–∑ –ø–æ 30 —Å–µ–∫—É–Ω–¥)
        await asyncio.sleep(30)
        
        try:
            response = requests.get(f"{CRYPTO_BOT_API_URL}/getInvoices?invoice_ids={invoice_id}", headers=headers)
            response.raise_for_status()
            invoice = response.json()['result']['items'][0]
            
            if invoice['status'] == 'paid':
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
                db['orders'][order_id]['status'] = 'paid'
                db['orders'][order_id]['paid_at'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                save_db(db)
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await bot.send_message(
                    user_id,
                    "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É.",
                    reply_markup=get_main_kb(user_id))
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
                for admin_id in db['admins']:
                    try:
                        await bot.send_message(
                            admin_id,
                            f"–ù–æ–≤—ã–π –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ #{order_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{db['users'][str(user_id)]['username']}")
                    except:
                        continue
                
                return
                
        except Exception as e:
            logger.error(f"Payment check error: {e}")
            continue
    
    # –ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç
    await bot.send_message(
        user_id,
        "–í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É –∏—Å—Ç–µ–∫–ª–æ. –ï—Å–ª–∏ –≤—ã –ø—Ä–æ–∏–∑–≤–µ–ª–∏ –æ–ø–ª–∞—Ç—É, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
        reply_markup=get_main_kb(user_id))
        # –ß–∞—Å—Ç—å 3: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏

@dp.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å"))
async def cmd_profile(message: types.Message):
    db = load_db()
    user_id = message.from_user.id
    user_data = db['users'].get(str(user_id), {})
    
    if not user_data:
        await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        return
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤
    orders_count = len(user_data['orders'])
    paid_orders = sum(1 for order_id in user_data['orders'] 
                     if db['orders'].get(str(order_id), {}).get('status') == 'paid')
    
    profile_msg = (
        f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
        f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_data.get('registration_date', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {user_data.get('balance', 0)} —Ä—É–±\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤:\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {orders_count}\n"
        f"‚Ä¢ –û–ø–ª–∞—á–µ–Ω–Ω—ã—Ö: {paid_orders}\n\n"
        f"üÜî –í–∞—à ID: {user_id}"
    )
    
    kb = ReplyKeyboardBuilder()
    kb.add(KeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"))
    kb.add(KeyboardButton(text="üîô –ù–∞–∑–∞–¥"))
    kb.adjust(2)
    
    await message.answer_photo(
        photo="https://example.com/profile_image.jpg",
        caption=profile_msg,
        reply_markup=kb.as_markup(resize_keyboard=True))
    )

@dp.message(F.text == "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"))
async def cmd_deposit(message: types.Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö (–º–∏–Ω–∏–º—É–º 100 —Ä—É–±):",
        reply_markup=get_back_kb())
    )
    await state.set_state(PaymentStates.choosing_amount)

@dp.message(PaymentStates.choosing_amount, F.text.regexp(r'^\d+$'))
async def process_deposit_amount(message: types.Message, state: FSMContext):
    amount = int(message.text)
    
    if amount < 100:
        await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - 100 —Ä—É–±. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é —Å—É–º–º—É:")
        return
    
    await state.update_data(amount=amount)
    
    kb = ReplyKeyboardBuilder()
    kb.add(KeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π"))
    kb.add(KeyboardButton(text="üí∞ –û–ø–ª–∞—Ç–∏—Ç—å CryptoBot"))
    kb.add(KeyboardButton(text="üîô –ù–∞–∑–∞–¥"))
    kb.adjust(2)
    
    await message.answer(
        f"–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {amount} —Ä—É–±\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=kb.as_markup(resize_keyboard=True))
    )
    await state.set_state(PaymentStates.confirmation)

@dp.message(PaymentStates.confirmation, F.text == "üí∞ –û–ø–ª–∞—Ç–∏—Ç—å CryptoBot"))
async def deposit_with_cryptobot(message: types.Message, state: FSMContext):
    data = await state.get_data()
    amount = data['amount']
    user_id = message.from_user.id
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –≤ CryptoBot
    headers = {
        "Crypto-Pay-API-Token": CRYPTO_BOT_TOKEN,
        "Content-Type": "application/json"
    }
    payload = {
        "amount": amount,
        "asset": "USDT",
        "description": f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {amount} —Ä—É–±",
        "hidden_message": f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}",
        "paid_btn_name": "viewItem",
        "paid_btn_url": "https://t.me/your_bot",
        "payload": f"deposit_{user_id}"
    }
    
    try:
        response = requests.post(f"{CRYPTO_BOT_API_URL}/createInvoice", headers=headers, json=payload)
        response.raise_for_status()
        invoice = response.json()['result']
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
        await message.answer(
            f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {amount} —Ä—É–± (~{amount / 75:.2f} USDT)\n\n"
            f"–û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {invoice['pay_url']}\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
            reply_markup=get_back_kb())
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –æ–ø–ª–∞—Ç—ã
        asyncio.create_task(check_deposit_payment(invoice['invoice_id'], user_id, amount))
        
    except Exception as e:
        logger.error(f"CryptoBot deposit error: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.",
            reply_markup=get_back_kb())
        )

async def check_deposit_payment(invoice_id, user_id, amount):
    headers = {
        "Crypto-Pay-API-Token": CRYPTO_BOT_TOKEN
    }
    
    for _ in range(30):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç
        await asyncio.sleep(30)
        
        try:
            response = requests.get(f"{CRYPTO_BOT_API_URL}/getInvoices?invoice_ids={invoice_id}", headers=headers)
            response.raise_for_status()
            invoice = response.json()['result']['items'][0]
            
            if invoice['status'] == 'paid':
                # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                db = load_db()
                db['users'][str(user_id)]['balance'] = db['users'][str(user_id)].get('balance', 0) + amount
                save_db(db)
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await bot.send_message(
                    user_id,
                    f"‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} —Ä—É–±!",
                    reply_markup=get_main_kb(user_id))
                
                return
                
        except Exception as e:
            logger.error(f"Deposit check error: {e}")
            continue
    
    # –ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç
    await bot.send_message(
        user_id,
        "–í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É –∏—Å—Ç–µ–∫–ª–æ. –ï—Å–ª–∏ –≤—ã –ø—Ä–æ–∏–∑–≤–µ–ª–∏ –æ–ø–ª–∞—Ç—É, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
        reply_markup=get_main_kb(user_id))

@dp.message(F.text == "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞"))
async def cmd_support(message: types.Message):
    support_msg = (
        "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞ —É—Å–ª—É–≥ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –≤–∞—à–∏—Ö —Å—Ç—Ä–∏–º–æ–≤ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö.\n\n"
        "üìå –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n"
        "1. –í—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –∏ —É—Å–ª—É–≥—É\n"
        "2. –£–∫–∞–∑—ã–≤–∞–µ—Ç–µ –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞\n"
        "3. –û–ø–ª–∞—á–∏–≤–∞–µ—Ç–µ —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º\n"
        "4. –ú—ã –≤—ã–ø–æ–ª–Ω—è–µ–º –≤–∞—à –∑–∞–∫–∞–∑ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è\n\n"
        "‚ùì –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã:\n"
        "‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @support_username\n"
        "‚Ä¢ –ò–ª–∏ –Ω–∞ email: support@example.com\n\n"
        "‚è≥ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: –æ–±—ã—á–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è (10:00-20:00 –ú–°–ö)"
    )
    
    await message.answer_photo(
        photo="https://example.com/support_image.jpg",
        caption=support_msg,
        reply_markup=get_back_kb())
    )
    # –ß–∞—Å—Ç—å 4: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏

@dp.message(F.text == "üëë –ê–¥–º–∏–Ω"))
async def cmd_admin(message: types.Message):
    db = load_db()
    user_id = message.from_user.id
    
    if user_id not in db['admins']:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    
    kb = ReplyKeyboardBuilder()
    kb.add(KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"))
    kb.add(KeyboardButton(text="üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏"))
    kb.add(KeyboardButton(text="üë• –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∞"))
    kb.add(KeyboardButton(text="üë• –°–Ω—è—Ç—å –∞–¥–º–∏–Ω–∞"))
    kb.add(KeyboardButton(text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"))
    kb.add(KeyboardButton(text="üîô –ù–∞–∑–∞–¥"))
    kb.adjust(2)
    
    await message.answer_photo(
        photo="https://example.com/admin_image.jpg",
        caption="üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
        reply_markup=kb.as_markup(resize_keyboard=True))
    )

@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"))
async def cmd_bot_stats(message: types.Message):
    db = load_db()
    
    total_users = len(db['users'])
    total_orders = len(db['orders'])
    paid_orders = sum(1 for order in db['orders'].values() if order['status'] == 'paid')
    total_revenue = sum(order['amount'] for order in db['orders'].values() if order['status'] == 'paid')
    
    stats_msg = (
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}\n"
        f"üí∞ –û–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {paid_orders}\n"
        f"üíµ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {total_revenue} —Ä—É–±\n\n"
        f"üîÑ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
    )
    
    await message.answer(stats_msg, reply_markup=get_back_kb())

@dp.message(F.text == "üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏"))
async def cmd_manage_orders(message: types.Message, state: FSMContext):
    db = load_db()
    
    if not db['orders']:
        await message.answer("–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∑–∞–∫–∞–∑–∞–º–∏
    kb = InlineKeyboardBuilder()
    for order_id, order in list(db['orders'].items())[-10:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–∫–∞–∑–æ–≤
        kb.add(InlineKeyboardButton(
            text=f"#{order_id} - {order['status']}",
            callback_data=f"order_{order_id}"))
    
    kb.adjust(1)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=kb.as_markup())
    )
    await state.set_state(AdminStates.managing_orders)

@dp.callback_query(F.data.startswith("order_"), AdminStates.managing_orders)
async def process_order_selection(callback: types.CallbackQuery, state: FSMContext):
    order_id = callback.data.split("_")[1]
    db = load_db()
    order = db['orders'].get(order_id)
    
    if not order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    user = db['users'].get(str(order['user_id']), {})
    username = user.get('username', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    
    order_msg = (
        f"üì¶ –ó–∞–∫–∞–∑ #{order_id}\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} (ID: {order['user_id']})\n"
        f"üõí –£—Å–ª—É–≥–∞: {order['service']}\n"
        f"üñ• –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {order['platform']}\n"
        f"üì∫ –ö–∞–Ω–∞–ª: {order['channel']}\n"
        f"üìÖ –î–∞—Ç–∞: {order['date']}\n"
        f"‚è∞ –í—Ä–µ–º—è: {order['time']}\n"
        f"üí∞ –°—É–º–º–∞: {order['amount']} —Ä—É–±\n"
        f"üìå –°—Ç–∞—Ç—É—Å: {order['status']}\n"
        f"üïí –°–æ–∑–¥–∞–Ω: {order['created_at']}"
    )
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    kb = InlineKeyboardBuilder()
    kb.add(InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{order_id}"))
    kb.add(InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{order_id}"))
    kb.add(InlineKeyboardButton(text="üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ", callback_data=f"process_{order_id}"))
    kb.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_orders"))
    kb.adjust(2)
    
    await callback.message.edit_text(order_msg, reply_markup=kb.as_markup())
    await callback.answer()

@dp.callback_query(F.data.startswith(("confirm_", "reject_", "process_")), AdminStates.managing_orders)
async def process_order_status_change(callback: types.CallbackQuery):
    action, order_id = callback.data.split("_")
    db = load_db()
    order = db['orders'].get(order_id)
    
    if not order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    status_map = {
        "confirm": "completed",
        "reject": "rejected",
        "process": "in_progress"
    }
    
    order['status'] = status_map[action]
    save_db(db)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        status_messages = {
            "completed": "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ #{} –≤—ã–ø–æ–ª–Ω–µ–Ω!",
            "rejected": "‚ùå –í–∞—à –∑–∞–∫–∞–∑ #{} –æ—Ç–∫–ª–æ–Ω–µ–Ω. –î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏–π –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            "in_progress": "üîÑ –í–∞—à –∑–∞–∫–∞–∑ #{} –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É."
        }
        await bot.send_message(
            order['user_id'],
            status_messages[status_map[action]].format(order_id))
    except:
        pass
    
    await callback.answer(f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{order_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {order['status']}")
    await cmd_manage_orders(callback.message, callback.message.from_user.id)

@dp.message(F.text == "üë• –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∞"))
async def cmd_add_admin(message: types.Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–æ–º:",
        reply_markup=get_back_kb())
    )
    await state.set_state(AdminStates.adding_admin)

@dp.message(AdminStates.adding_admin, F.text.regexp(r'^\d+$'))
async def process_add_admin(message: types.Message, state: FSMContext):
    db = load_db()
    new_admin_id = int(message.text)
    
    if new_admin_id in db['admins']:
        await message.answer("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º.")
        return
    
    db['admins'].append(new_admin_id)
    save_db(db)
    
    await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_admin_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–æ–º.")
    await state.clear()
    await cmd_admin(message)

@dp.message(F.text == "üë• –°–Ω—è—Ç—å –∞–¥–º–∏–Ω–∞"))
async def cmd_remove_admin(message: types.Message, state: FSMContext):
    db = load_db()
    
    if len(db['admins']) <= 1:
        await message.answer("–ù–µ–ª—å–∑—è —Å–Ω—è—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–¥–º–∏–Ω–∞!")
        return
    
    kb = ReplyKeyboardBuilder()
    for admin_id in db['admins']:
        if admin_id != message.from_user.id:  # –ù–µ–ª—å–∑—è —Å–Ω—è—Ç—å —Å–µ–±—è
            kb.add(KeyboardButton(text=str(admin_id)))
    kb.add(KeyboardButton(text="üîô –ù–∞–∑–∞–¥"))
    kb.adjust(2)
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ ID –∞–¥–º–∏–Ω–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–Ω—è—Ç—å:",
        reply_markup=kb.as_markup(resize_keyboard=True))
    )
    await state.set_state(AdminStates.removing_admin)

@dp.message(AdminStates.removing_admin, F.text.regexp(r'^\d+$'))
async def process_remove_admin(message: types.Message, state: FSMContext):
    db = load_db()
    admin_id = int(message.text)
    
    if admin_id not in db['admins']:
        await message.answer("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º.")
        return
    
    if admin_id == message.from_user.id:
        await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–Ω—è—Ç—å —Å–µ–±—è. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥—Ä—É–≥–æ–º—É –∞–¥–º–∏–Ω—É.")
        return
    
    db['admins'].remove(admin_id)
    save_db(db)
    
    await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin_id} –±–æ–ª—å—à–µ –Ω–µ –∞–¥–º–∏–Ω.")
    await state.clear()
    await cmd_admin(message)

@dp.message(F.text == "üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"))
async def cmd_change_balance(message: types.Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, '123456 500' –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ '123456 -500' –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è):",
        reply_markup=get_back_kb())
    )
    await state.set_state(AdminStates.changing_balance)

@dp.message(AdminStates.changing_balance, F.text.regexp(r'^\d+\s+-?\d+$'))
async def process_change_balance(message: types.Message, state: FSMContext):
    user_id, amount = message.text.split()
    user_id = int(user_id)
    amount = int(amount)
    
    db = load_db()
    if str(user_id) not in db['users']:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    current_balance = db['users'][str(user_id)].get('balance', 0)
    new_balance = current_balance + amount
    
    if new_balance < 0:
        await message.answer("–ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å.")
        return
    
    db['users'][str(user_id)]['balance'] = new_balance
    save_db(db)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await bot.send_message(
            user_id,
            f"–í–∞—à –±–∞–ª–∞–Ω—Å –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
            f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {'+' if amount >= 0 else ''}{amount} —Ä—É–±\n"
            f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} —Ä—É–±")
    except:
        pass
    
    await message.answer(
        f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑–º–µ–Ω–µ–Ω.\n"
        f"–°—Ç–∞—Ä—ã–π –±–∞–ª–∞–Ω—Å: {current_balance} —Ä—É–±\n"
        f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {'+' if amount >= 0 else ''}{amount} —Ä—É–±\n"
        f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} —Ä—É–±")
    
    await state.clear()
    await cmd_admin(message)
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
@dp.error()
async def error_handler(event: types.Update, exception: Exception):
    logger.error(f"–û—à–∏–±–∫–∞: {exception}", exc_info=True)
    
    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–∞ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
    if isinstance(exception, (KeyboardInterrupt, SystemExit)):
        raise exception
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –æ–± –æ—à–∏–±–∫–µ
    db = load_db()
    for admin_id in db['admins']:
        try:
            await bot.send_message(
                admin_id,
                f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:\n\n{str(exception)[:3000]}")
        except:
            continue
    
    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    await asyncio.sleep(5)
    await dp.start_polling(bot, skip_updates=True)
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥ —Å –∞–≤—Ç–æ-—Ä–µ—Å—Ç–∞—Ä—Ç–æ–º
    while True:
        try:
            await dp.start_polling(bot, skip_updates=True)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}\n–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(5)

if __name__ == "__main__":
    # –î–ª—è Render: –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º main()
    asyncio.run(main())
